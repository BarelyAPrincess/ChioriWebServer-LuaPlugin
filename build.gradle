defaultTasks 'clean', 'build'

apply plugin: 'eclipse'
apply plugin: 'groovy'
apply plugin: 'license'
apply plugin: 'checkstyle'
apply from: 'etc/publish.gradle'

repositories
{
	jcenter()
	maven
	{ url "http://jenkins.chiorichan.com:8081/artifactory/" }
	mavenCentral()
}

buildscript
{
	repositories
	{
		jcenter()
		maven
		{ url "http://jenkins.chiorichan.com:8081/artifactory/" }
		mavenCentral()
	}
	
	dependencies
	{
		classpath group: 'nl.javadude.gradle.plugins', name:'license-gradle-plugin', version: '0.11.0'
		classpath group: 'org.yaml', name: 'snakeyaml', version: '1.10'
		classpath group: 'org.ajoberstar', name: 'gradle-git', version: '1.2.0'
	}
}

import org.yaml.snakeyaml.Yaml
def getVersionNumber()
{
	try
	{
		File configFile = new File('./src/main/resources/plugin.yaml')
		Yaml yaml = new Yaml()
		def config = yaml.load(configFile.newReader())
		
		return config.version
	}
	catch ( e )
	{
		e.printStackTrace()
		return 0
	}
}

def gitDescribe()
{
	try
	{
		// determine git-describe output
		def stdout = new ByteArrayOutputStream()
		exec
		{
			commandLine 'git', 'describe', '--always'
			standardOutput = stdout
		}
		return stdout.toString().trim()
	}
	catch (e)
	{
		return "unknown"
	}
}

sourceCompatibility = '1.7'
targetCompatibility = '1.7'

def rawVersion = getVersionNumber() + '-' + gitDescribe()
def jenkins_build = System.getenv("BUILD_NUMBER")
def travis_build = System.getenv("TRAVIS_BUILD_NUMBER")
def buildNumber = '0'

group = 'com.chiorichan.plugin'
description = 'Implements the Lua as a web programming language for Chiori-chan\'s Web Server'

if ( System.getenv("releaseBuild") != null )
{
	version = getVersionNumber()
}
else
{
	if ( jenkins_build != null )
	{
		version = rawVersion + '-jenkins-' + jenkins_build
		buildNumber = jenkins_build
	}
	else if ( travis_build != null )
	{
		version = rawVersion + '-travis-' + travis_build
		buildNumber = travis_build
	}
	else
		version = rawVersion + '-dev'
}

distsDirName = 'dist'
libsDirName = 'dist'

compileJava
{ options.encoding = 'UTF-8' }

compileGroovy
{ options.encoding = "UTF-8" }

javadoc
{ options.encoding = "UTF-8" }

checkstyle
{
	configFile = file('etc/checkstyle.xml')
	configProperties = ["basedir":project.projectDir]
}

eclipse
{
	project
	{ name = 'ChioriWebServer-LuaPlugin' }
}

license
{
	header rootProject.file('etc/HEADER')
	ignoreFailures true
	strictCheck true
	mapping 'yaml', 'SCRIPT_STYLE'
	mapping 'yml', 'SCRIPT_STYLE'
	excludes ([
		'**/*.md5',
		'**/config.yaml',
		'**/plugin.yaml'
	])
	ext.year = Calendar.getInstance().get(Calendar.YEAR)
	ext.name = 'Chiori Greene a.k.a. Chiori-chan'
	ext.email = 'me@chiorichan.com'
}

dependencies {
	// Used for Programming Convinience
	compile group: 'com.google.guava', name: 'guava', version: '18.0'
	compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.3.2'
	
	// Clones and compiles against the ChioriWebServer repository source code
	// compile files('../ChioriWebServer/src/main/groovy')
	
	compile project(path: ':ChioriWebServer')
}

import org.ajoberstar.grgit.Grgit
task downloadGitDependency() {
	//def grgit = Grgit.clone(dir: '../ChioriWebServer', uri: 'git@github.com:ChioriGreene/ChioriWebServer.git')
}

build.dependsOn downloadGitDependency

task sourcesArchive(type: Zip){
	classifier = 'sources'
	from sourceSets.main.allSource
}

task javadocArchive(type: Zip, dependsOn: 'javadoc'){
	classifier = 'javadoc'
	from javadoc.destinationDir
}

artifacts
{ archives sourcesArchive, javadocArchive }